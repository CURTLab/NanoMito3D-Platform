// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSFProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSFProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSFProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSFProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSFProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSFProto_2eproto;
namespace TSF {
class FluorophoreType;
struct FluorophoreTypeDefaultTypeInternal;
extern FluorophoreTypeDefaultTypeInternal _FluorophoreType_default_instance_;
class ROI;
struct ROIDefaultTypeInternal;
extern ROIDefaultTypeInternal _ROI_default_instance_;
class Spot;
struct SpotDefaultTypeInternal;
extern SpotDefaultTypeInternal _Spot_default_instance_;
class SpotList;
struct SpotListDefaultTypeInternal;
extern SpotListDefaultTypeInternal _SpotList_default_instance_;
}  // namespace TSF
PROTOBUF_NAMESPACE_OPEN
template<> ::TSF::FluorophoreType* Arena::CreateMaybeMessage<::TSF::FluorophoreType>(Arena*);
template<> ::TSF::ROI* Arena::CreateMaybeMessage<::TSF::ROI>(Arena*);
template<> ::TSF::Spot* Arena::CreateMaybeMessage<::TSF::Spot>(Arena*);
template<> ::TSF::SpotList* Arena::CreateMaybeMessage<::TSF::SpotList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSF {

enum FitMode : int {
  ONEAXIS = 0,
  TWOAXIS = 1,
  TWOAXISANDTHETA = 2
};
bool FitMode_IsValid(int value);
constexpr FitMode FitMode_MIN = ONEAXIS;
constexpr FitMode FitMode_MAX = TWOAXISANDTHETA;
constexpr int FitMode_ARRAYSIZE = FitMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FitMode_descriptor();
template<typename T>
inline const std::string& FitMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FitMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FitMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FitMode_descriptor(), enum_t_value);
}
inline bool FitMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FitMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FitMode>(
    FitMode_descriptor(), name, value);
}
enum ThetaUnits : int {
  DEGREES = 0,
  RADIANS = 1
};
bool ThetaUnits_IsValid(int value);
constexpr ThetaUnits ThetaUnits_MIN = DEGREES;
constexpr ThetaUnits ThetaUnits_MAX = RADIANS;
constexpr int ThetaUnits_ARRAYSIZE = ThetaUnits_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThetaUnits_descriptor();
template<typename T>
inline const std::string& ThetaUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ThetaUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ThetaUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ThetaUnits_descriptor(), enum_t_value);
}
inline bool ThetaUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ThetaUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ThetaUnits>(
    ThetaUnits_descriptor(), name, value);
}
enum IntensityUnits : int {
  COUNTS = 0,
  PHOTONS = 1
};
bool IntensityUnits_IsValid(int value);
constexpr IntensityUnits IntensityUnits_MIN = COUNTS;
constexpr IntensityUnits IntensityUnits_MAX = PHOTONS;
constexpr int IntensityUnits_ARRAYSIZE = IntensityUnits_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntensityUnits_descriptor();
template<typename T>
inline const std::string& IntensityUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntensityUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntensityUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntensityUnits_descriptor(), enum_t_value);
}
inline bool IntensityUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntensityUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntensityUnits>(
    IntensityUnits_descriptor(), name, value);
}
enum LocationUnits : int {
  NM = 0,
  UM = 1,
  PIXELS = 2
};
bool LocationUnits_IsValid(int value);
constexpr LocationUnits LocationUnits_MIN = NM;
constexpr LocationUnits LocationUnits_MAX = PIXELS;
constexpr int LocationUnits_ARRAYSIZE = LocationUnits_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationUnits_descriptor();
template<typename T>
inline const std::string& LocationUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocationUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocationUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocationUnits_descriptor(), enum_t_value);
}
inline bool LocationUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocationUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocationUnits>(
    LocationUnits_descriptor(), name, value);
}
// ===================================================================

class FluorophoreType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSF.FluorophoreType) */ {
 public:
  inline FluorophoreType() : FluorophoreType(nullptr) {}
  ~FluorophoreType() override;
  explicit constexpr FluorophoreType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FluorophoreType(const FluorophoreType& from);
  FluorophoreType(FluorophoreType&& from) noexcept
    : FluorophoreType() {
    *this = ::std::move(from);
  }

  inline FluorophoreType& operator=(const FluorophoreType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FluorophoreType& operator=(FluorophoreType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FluorophoreType& default_instance() {
    return *internal_default_instance();
  }
  static inline const FluorophoreType* internal_default_instance() {
    return reinterpret_cast<const FluorophoreType*>(
               &_FluorophoreType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FluorophoreType& a, FluorophoreType& b) {
    a.Swap(&b);
  }
  inline void Swap(FluorophoreType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FluorophoreType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FluorophoreType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FluorophoreType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FluorophoreType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FluorophoreType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FluorophoreType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSF.FluorophoreType";
  }
  protected:
  explicit FluorophoreType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kIdFieldNumber = 1,
    kIsFiducialFieldNumber = 3,
  };
  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional bool is_fiducial = 3;
  bool has_is_fiducial() const;
  private:
  bool _internal_has_is_fiducial() const;
  public:
  void clear_is_fiducial();
  bool is_fiducial() const;
  void set_is_fiducial(bool value);
  private:
  bool _internal_is_fiducial() const;
  void _internal_set_is_fiducial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSF.FluorophoreType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int32_t id_;
  bool is_fiducial_;
  friend struct ::TableStruct_TSFProto_2eproto;
};
// -------------------------------------------------------------------

class ROI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSF.ROI) */ {
 public:
  inline ROI() : ROI(nullptr) {}
  ~ROI() override;
  explicit constexpr ROI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ROI(const ROI& from);
  ROI(ROI&& from) noexcept
    : ROI() {
    *this = ::std::move(from);
  }

  inline ROI& operator=(const ROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROI& operator=(ROI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROI* internal_default_instance() {
    return reinterpret_cast<const ROI*>(
               &_ROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ROI& a, ROI& b) {
    a.Swap(&b);
  }
  inline void Swap(ROI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ROI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ROI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ROI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ROI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSF.ROI";
  }
  protected:
  explicit ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kXWidthFieldNumber = 3,
    kYWidthFieldNumber = 4,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // required int32 x_width = 3;
  bool has_x_width() const;
  private:
  bool _internal_has_x_width() const;
  public:
  void clear_x_width();
  int32_t x_width() const;
  void set_x_width(int32_t value);
  private:
  int32_t _internal_x_width() const;
  void _internal_set_x_width(int32_t value);
  public:

  // required int32 y_width = 4;
  bool has_y_width() const;
  private:
  bool _internal_has_y_width() const;
  public:
  void clear_y_width();
  int32_t y_width() const;
  void set_y_width(int32_t value);
  private:
  int32_t _internal_y_width() const;
  void _internal_set_y_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSF.ROI)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  int32_t x_width_;
  int32_t y_width_;
  friend struct ::TableStruct_TSFProto_2eproto;
};
// -------------------------------------------------------------------

class SpotList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSF.SpotList) */ {
 public:
  inline SpotList() : SpotList(nullptr) {}
  ~SpotList() override;
  explicit constexpr SpotList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotList(const SpotList& from);
  SpotList(SpotList&& from) noexcept
    : SpotList() {
    *this = ::std::move(from);
  }

  inline SpotList& operator=(const SpotList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotList& operator=(SpotList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpotList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotList* internal_default_instance() {
    return reinterpret_cast<const SpotList*>(
               &_SpotList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpotList& a, SpotList& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpotList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpotList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpotList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSF.SpotList";
  }
  protected:
  explicit SpotList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFluorophoreTypesFieldNumber = 26,
    kEcfFieldNumber = 28,
    kQeFieldNumber = 30,
    kNameFieldNumber = 2,
    kFilepathFieldNumber = 3,
    kRoiFieldNumber = 29,
    kUidFieldNumber = 4,
    kNrPixelsXFieldNumber = 5,
    kNrPixelsYFieldNumber = 6,
    kNrSpotsFieldNumber = 8,
    kPixelSizeFieldNumber = 7,
    kBoxSizeFieldNumber = 17,
    kNrChannelsFieldNumber = 18,
    kNrFramesFieldNumber = 19,
    kNrSlicesFieldNumber = 20,
    kNrPosFieldNumber = 21,
    kLocationUnitsFieldNumber = 22,
    kIntensityUnitsFieldNumber = 23,
    kThetaUnitsFieldNumber = 27,
    kFitModeFieldNumber = 24,
    kIsTrackFieldNumber = 25,
    kApplicationIdFieldNumber = 1,
  };
  // repeated .TSF.FluorophoreType fluorophore_types = 26;
  int fluorophore_types_size() const;
  private:
  int _internal_fluorophore_types_size() const;
  public:
  void clear_fluorophore_types();
  ::TSF::FluorophoreType* mutable_fluorophore_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSF::FluorophoreType >*
      mutable_fluorophore_types();
  private:
  const ::TSF::FluorophoreType& _internal_fluorophore_types(int index) const;
  ::TSF::FluorophoreType* _internal_add_fluorophore_types();
  public:
  const ::TSF::FluorophoreType& fluorophore_types(int index) const;
  ::TSF::FluorophoreType* add_fluorophore_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSF::FluorophoreType >&
      fluorophore_types() const;

  // repeated double ecf = 28;
  int ecf_size() const;
  private:
  int _internal_ecf_size() const;
  public:
  void clear_ecf();
  private:
  double _internal_ecf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ecf() const;
  void _internal_add_ecf(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ecf();
  public:
  double ecf(int index) const;
  void set_ecf(int index, double value);
  void add_ecf(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ecf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ecf();

  // repeated double qe = 30;
  int qe_size() const;
  private:
  int _internal_qe_size() const;
  public:
  void clear_qe();
  private:
  double _internal_qe(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_qe() const;
  void _internal_add_qe(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_qe();
  public:
  double qe(int index) const;
  void set_qe(int index, double value);
  void add_qe(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      qe() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_qe();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string filepath = 3;
  bool has_filepath() const;
  private:
  bool _internal_has_filepath() const;
  public:
  void clear_filepath();
  const std::string& filepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // optional .TSF.ROI roi = 29;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::TSF::ROI& roi() const;
  PROTOBUF_NODISCARD ::TSF::ROI* release_roi();
  ::TSF::ROI* mutable_roi();
  void set_allocated_roi(::TSF::ROI* roi);
  private:
  const ::TSF::ROI& _internal_roi() const;
  ::TSF::ROI* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::TSF::ROI* roi);
  ::TSF::ROI* unsafe_arena_release_roi();

  // optional int64 uid = 4;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  int64_t uid() const;
  void set_uid(int64_t value);
  private:
  int64_t _internal_uid() const;
  void _internal_set_uid(int64_t value);
  public:

  // optional int32 nr_pixels_x = 5;
  bool has_nr_pixels_x() const;
  private:
  bool _internal_has_nr_pixels_x() const;
  public:
  void clear_nr_pixels_x();
  int32_t nr_pixels_x() const;
  void set_nr_pixels_x(int32_t value);
  private:
  int32_t _internal_nr_pixels_x() const;
  void _internal_set_nr_pixels_x(int32_t value);
  public:

  // optional int32 nr_pixels_y = 6;
  bool has_nr_pixels_y() const;
  private:
  bool _internal_has_nr_pixels_y() const;
  public:
  void clear_nr_pixels_y();
  int32_t nr_pixels_y() const;
  void set_nr_pixels_y(int32_t value);
  private:
  int32_t _internal_nr_pixels_y() const;
  void _internal_set_nr_pixels_y(int32_t value);
  public:

  // optional int64 nr_spots = 8;
  bool has_nr_spots() const;
  private:
  bool _internal_has_nr_spots() const;
  public:
  void clear_nr_spots();
  int64_t nr_spots() const;
  void set_nr_spots(int64_t value);
  private:
  int64_t _internal_nr_spots() const;
  void _internal_set_nr_spots(int64_t value);
  public:

  // optional float pixel_size = 7;
  bool has_pixel_size() const;
  private:
  bool _internal_has_pixel_size() const;
  public:
  void clear_pixel_size();
  float pixel_size() const;
  void set_pixel_size(float value);
  private:
  float _internal_pixel_size() const;
  void _internal_set_pixel_size(float value);
  public:

  // optional int32 box_size = 17;
  bool has_box_size() const;
  private:
  bool _internal_has_box_size() const;
  public:
  void clear_box_size();
  int32_t box_size() const;
  void set_box_size(int32_t value);
  private:
  int32_t _internal_box_size() const;
  void _internal_set_box_size(int32_t value);
  public:

  // optional int32 nr_channels = 18;
  bool has_nr_channels() const;
  private:
  bool _internal_has_nr_channels() const;
  public:
  void clear_nr_channels();
  int32_t nr_channels() const;
  void set_nr_channels(int32_t value);
  private:
  int32_t _internal_nr_channels() const;
  void _internal_set_nr_channels(int32_t value);
  public:

  // optional int32 nr_frames = 19;
  bool has_nr_frames() const;
  private:
  bool _internal_has_nr_frames() const;
  public:
  void clear_nr_frames();
  int32_t nr_frames() const;
  void set_nr_frames(int32_t value);
  private:
  int32_t _internal_nr_frames() const;
  void _internal_set_nr_frames(int32_t value);
  public:

  // optional int32 nr_slices = 20;
  bool has_nr_slices() const;
  private:
  bool _internal_has_nr_slices() const;
  public:
  void clear_nr_slices();
  int32_t nr_slices() const;
  void set_nr_slices(int32_t value);
  private:
  int32_t _internal_nr_slices() const;
  void _internal_set_nr_slices(int32_t value);
  public:

  // optional int32 nr_pos = 21;
  bool has_nr_pos() const;
  private:
  bool _internal_has_nr_pos() const;
  public:
  void clear_nr_pos();
  int32_t nr_pos() const;
  void set_nr_pos(int32_t value);
  private:
  int32_t _internal_nr_pos() const;
  void _internal_set_nr_pos(int32_t value);
  public:

  // optional .TSF.LocationUnits location_units = 22;
  bool has_location_units() const;
  private:
  bool _internal_has_location_units() const;
  public:
  void clear_location_units();
  ::TSF::LocationUnits location_units() const;
  void set_location_units(::TSF::LocationUnits value);
  private:
  ::TSF::LocationUnits _internal_location_units() const;
  void _internal_set_location_units(::TSF::LocationUnits value);
  public:

  // optional .TSF.IntensityUnits intensity_units = 23;
  bool has_intensity_units() const;
  private:
  bool _internal_has_intensity_units() const;
  public:
  void clear_intensity_units();
  ::TSF::IntensityUnits intensity_units() const;
  void set_intensity_units(::TSF::IntensityUnits value);
  private:
  ::TSF::IntensityUnits _internal_intensity_units() const;
  void _internal_set_intensity_units(::TSF::IntensityUnits value);
  public:

  // optional .TSF.ThetaUnits theta_units = 27;
  bool has_theta_units() const;
  private:
  bool _internal_has_theta_units() const;
  public:
  void clear_theta_units();
  ::TSF::ThetaUnits theta_units() const;
  void set_theta_units(::TSF::ThetaUnits value);
  private:
  ::TSF::ThetaUnits _internal_theta_units() const;
  void _internal_set_theta_units(::TSF::ThetaUnits value);
  public:

  // optional .TSF.FitMode fit_mode = 24;
  bool has_fit_mode() const;
  private:
  bool _internal_has_fit_mode() const;
  public:
  void clear_fit_mode();
  ::TSF::FitMode fit_mode() const;
  void set_fit_mode(::TSF::FitMode value);
  private:
  ::TSF::FitMode _internal_fit_mode() const;
  void _internal_set_fit_mode(::TSF::FitMode value);
  public:

  // optional bool is_track = 25 [default = false];
  bool has_is_track() const;
  private:
  bool _internal_has_is_track() const;
  public:
  void clear_is_track();
  bool is_track() const;
  void set_is_track(bool value);
  private:
  bool _internal_is_track() const;
  void _internal_set_is_track(bool value);
  public:

  // required int32 application_id = 1 [default = 1];
  bool has_application_id() const;
  private:
  bool _internal_has_application_id() const;
  public:
  void clear_application_id();
  int32_t application_id() const;
  void set_application_id(int32_t value);
  private:
  int32_t _internal_application_id() const;
  void _internal_set_application_id(int32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          SpotList, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSF.SpotList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSF::FluorophoreType > fluorophore_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ecf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > qe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::TSF::ROI* roi_;
  int64_t uid_;
  int32_t nr_pixels_x_;
  int32_t nr_pixels_y_;
  int64_t nr_spots_;
  float pixel_size_;
  int32_t box_size_;
  int32_t nr_channels_;
  int32_t nr_frames_;
  int32_t nr_slices_;
  int32_t nr_pos_;
  int location_units_;
  int intensity_units_;
  int theta_units_;
  int fit_mode_;
  bool is_track_;
  int32_t application_id_;
  friend struct ::TableStruct_TSFProto_2eproto;
};
// -------------------------------------------------------------------

class Spot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSF.Spot) */ {
 public:
  inline Spot() : Spot(nullptr) {}
  ~Spot() override;
  explicit constexpr Spot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Spot(const Spot& from);
  Spot(Spot&& from) noexcept
    : Spot() {
    *this = ::std::move(from);
  }

  inline Spot& operator=(const Spot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Spot& operator=(Spot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Spot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Spot* internal_default_instance() {
    return reinterpret_cast<const Spot*>(
               &_Spot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Spot& a, Spot& b) {
    a.Swap(&b);
  }
  inline void Swap(Spot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Spot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Spot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Spot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Spot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Spot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSF.Spot";
  }
  protected:
  explicit Spot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoleculeFieldNumber = 1,
    kChannelFieldNumber = 2,
    kFrameFieldNumber = 3,
    kSliceFieldNumber = 4,
    kPosFieldNumber = 5,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
    kZFieldNumber = 9,
    kIntensityFieldNumber = 10,
    kBackgroundFieldNumber = 11,
    kWidthFieldNumber = 12,
    kAFieldNumber = 13,
    kThetaFieldNumber = 14,
    kLocationUnitsFieldNumber = 17,
    kIntensityUnitsFieldNumber = 18,
    kFluorophoreTypeFieldNumber = 19,
    kYPositionFieldNumber = 108,
    kClusterFieldNumber = 20,
    kXOriginalFieldNumber = 101,
    kYOriginalFieldNumber = 102,
    kZOriginalFieldNumber = 103,
    kXPrecisionFieldNumber = 104,
    kYPrecisionFieldNumber = 105,
    kZPrecisionFieldNumber = 106,
    kXPositionFieldNumber = 107,
  };
  // required int32 molecule = 1;
  bool has_molecule() const;
  private:
  bool _internal_has_molecule() const;
  public:
  void clear_molecule();
  int32_t molecule() const;
  void set_molecule(int32_t value);
  private:
  int32_t _internal_molecule() const;
  void _internal_set_molecule(int32_t value);
  public:

  // required int32 channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int32 frame = 3;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  int32_t frame() const;
  void set_frame(int32_t value);
  private:
  int32_t _internal_frame() const;
  void _internal_set_frame(int32_t value);
  public:

  // optional int32 slice = 4;
  bool has_slice() const;
  private:
  bool _internal_has_slice() const;
  public:
  void clear_slice();
  int32_t slice() const;
  void set_slice(int32_t value);
  private:
  int32_t _internal_slice() const;
  void _internal_set_slice(int32_t value);
  public:

  // optional int32 pos = 5;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  int32_t pos() const;
  void set_pos(int32_t value);
  private:
  int32_t _internal_pos() const;
  void _internal_set_pos(int32_t value);
  public:

  // required float x = 7;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 8;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 9;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // required float intensity = 10;
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // optional float background = 11;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  float background() const;
  void set_background(float value);
  private:
  float _internal_background() const;
  void _internal_set_background(float value);
  public:

  // optional float width = 12;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float a = 13;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // optional float theta = 14;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // optional .TSF.LocationUnits location_units = 17;
  bool has_location_units() const;
  private:
  bool _internal_has_location_units() const;
  public:
  void clear_location_units();
  ::TSF::LocationUnits location_units() const;
  void set_location_units(::TSF::LocationUnits value);
  private:
  ::TSF::LocationUnits _internal_location_units() const;
  void _internal_set_location_units(::TSF::LocationUnits value);
  public:

  // optional .TSF.IntensityUnits intensity_units = 18;
  bool has_intensity_units() const;
  private:
  bool _internal_has_intensity_units() const;
  public:
  void clear_intensity_units();
  ::TSF::IntensityUnits intensity_units() const;
  void set_intensity_units(::TSF::IntensityUnits value);
  private:
  ::TSF::IntensityUnits _internal_intensity_units() const;
  void _internal_set_intensity_units(::TSF::IntensityUnits value);
  public:

  // optional int32 fluorophore_type = 19;
  bool has_fluorophore_type() const;
  private:
  bool _internal_has_fluorophore_type() const;
  public:
  void clear_fluorophore_type();
  int32_t fluorophore_type() const;
  void set_fluorophore_type(int32_t value);
  private:
  int32_t _internal_fluorophore_type() const;
  void _internal_set_fluorophore_type(int32_t value);
  public:

  // optional int32 y_position = 108;
  bool has_y_position() const;
  private:
  bool _internal_has_y_position() const;
  public:
  void clear_y_position();
  int32_t y_position() const;
  void set_y_position(int32_t value);
  private:
  int32_t _internal_y_position() const;
  void _internal_set_y_position(int32_t value);
  public:

  // optional int32 cluster = 20;
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  int32_t cluster() const;
  void set_cluster(int32_t value);
  private:
  int32_t _internal_cluster() const;
  void _internal_set_cluster(int32_t value);
  public:

  // optional float x_original = 101;
  bool has_x_original() const;
  private:
  bool _internal_has_x_original() const;
  public:
  void clear_x_original();
  float x_original() const;
  void set_x_original(float value);
  private:
  float _internal_x_original() const;
  void _internal_set_x_original(float value);
  public:

  // optional float y_original = 102;
  bool has_y_original() const;
  private:
  bool _internal_has_y_original() const;
  public:
  void clear_y_original();
  float y_original() const;
  void set_y_original(float value);
  private:
  float _internal_y_original() const;
  void _internal_set_y_original(float value);
  public:

  // optional float z_original = 103;
  bool has_z_original() const;
  private:
  bool _internal_has_z_original() const;
  public:
  void clear_z_original();
  float z_original() const;
  void set_z_original(float value);
  private:
  float _internal_z_original() const;
  void _internal_set_z_original(float value);
  public:

  // optional float x_precision = 104;
  bool has_x_precision() const;
  private:
  bool _internal_has_x_precision() const;
  public:
  void clear_x_precision();
  float x_precision() const;
  void set_x_precision(float value);
  private:
  float _internal_x_precision() const;
  void _internal_set_x_precision(float value);
  public:

  // optional float y_precision = 105;
  bool has_y_precision() const;
  private:
  bool _internal_has_y_precision() const;
  public:
  void clear_y_precision();
  float y_precision() const;
  void set_y_precision(float value);
  private:
  float _internal_y_precision() const;
  void _internal_set_y_precision(float value);
  public:

  // optional float z_precision = 106;
  bool has_z_precision() const;
  private:
  bool _internal_has_z_precision() const;
  public:
  void clear_z_precision();
  float z_precision() const;
  void set_z_precision(float value);
  private:
  float _internal_z_precision() const;
  void _internal_set_z_precision(float value);
  public:

  // optional int32 x_position = 107;
  bool has_x_position() const;
  private:
  bool _internal_has_x_position() const;
  public:
  void clear_x_position();
  int32_t x_position() const;
  void set_x_position(int32_t value);
  private:
  int32_t _internal_x_position() const;
  void _internal_set_x_position(int32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              Spot, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Spot, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSF.Spot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t molecule_;
  int32_t channel_;
  int32_t frame_;
  int32_t slice_;
  int32_t pos_;
  float x_;
  float y_;
  float z_;
  float intensity_;
  float background_;
  float width_;
  float a_;
  float theta_;
  int location_units_;
  int intensity_units_;
  int32_t fluorophore_type_;
  int32_t y_position_;
  int32_t cluster_;
  float x_original_;
  float y_original_;
  float z_original_;
  float x_precision_;
  float y_precision_;
  float z_precision_;
  int32_t x_position_;
  friend struct ::TableStruct_TSFProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FluorophoreType

// required int32 id = 1;
inline bool FluorophoreType::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FluorophoreType::has_id() const {
  return _internal_has_id();
}
inline void FluorophoreType::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FluorophoreType::_internal_id() const {
  return id_;
}
inline int32_t FluorophoreType::id() const {
  // @@protoc_insertion_point(field_get:TSF.FluorophoreType.id)
  return _internal_id();
}
inline void FluorophoreType::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void FluorophoreType::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TSF.FluorophoreType.id)
}

// optional string description = 2;
inline bool FluorophoreType::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FluorophoreType::has_description() const {
  return _internal_has_description();
}
inline void FluorophoreType::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FluorophoreType::description() const {
  // @@protoc_insertion_point(field_get:TSF.FluorophoreType.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FluorophoreType::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSF.FluorophoreType.description)
}
inline std::string* FluorophoreType::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:TSF.FluorophoreType.description)
  return _s;
}
inline const std::string& FluorophoreType::_internal_description() const {
  return description_.Get();
}
inline void FluorophoreType::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FluorophoreType::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FluorophoreType::release_description() {
  // @@protoc_insertion_point(field_release:TSF.FluorophoreType.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FluorophoreType::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSF.FluorophoreType.description)
}

// optional bool is_fiducial = 3;
inline bool FluorophoreType::_internal_has_is_fiducial() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FluorophoreType::has_is_fiducial() const {
  return _internal_has_is_fiducial();
}
inline void FluorophoreType::clear_is_fiducial() {
  is_fiducial_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FluorophoreType::_internal_is_fiducial() const {
  return is_fiducial_;
}
inline bool FluorophoreType::is_fiducial() const {
  // @@protoc_insertion_point(field_get:TSF.FluorophoreType.is_fiducial)
  return _internal_is_fiducial();
}
inline void FluorophoreType::_internal_set_is_fiducial(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_fiducial_ = value;
}
inline void FluorophoreType::set_is_fiducial(bool value) {
  _internal_set_is_fiducial(value);
  // @@protoc_insertion_point(field_set:TSF.FluorophoreType.is_fiducial)
}

// -------------------------------------------------------------------

// ROI

// required int32 x = 1;
inline bool ROI::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROI::has_x() const {
  return _internal_has_x();
}
inline void ROI::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ROI::_internal_x() const {
  return x_;
}
inline int32_t ROI::x() const {
  // @@protoc_insertion_point(field_get:TSF.ROI.x)
  return _internal_x();
}
inline void ROI::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void ROI::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TSF.ROI.x)
}

// required int32 y = 2;
inline bool ROI::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROI::has_y() const {
  return _internal_has_y();
}
inline void ROI::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ROI::_internal_y() const {
  return y_;
}
inline int32_t ROI::y() const {
  // @@protoc_insertion_point(field_get:TSF.ROI.y)
  return _internal_y();
}
inline void ROI::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void ROI::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TSF.ROI.y)
}

// required int32 x_width = 3;
inline bool ROI::_internal_has_x_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROI::has_x_width() const {
  return _internal_has_x_width();
}
inline void ROI::clear_x_width() {
  x_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ROI::_internal_x_width() const {
  return x_width_;
}
inline int32_t ROI::x_width() const {
  // @@protoc_insertion_point(field_get:TSF.ROI.x_width)
  return _internal_x_width();
}
inline void ROI::_internal_set_x_width(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  x_width_ = value;
}
inline void ROI::set_x_width(int32_t value) {
  _internal_set_x_width(value);
  // @@protoc_insertion_point(field_set:TSF.ROI.x_width)
}

// required int32 y_width = 4;
inline bool ROI::_internal_has_y_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ROI::has_y_width() const {
  return _internal_has_y_width();
}
inline void ROI::clear_y_width() {
  y_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ROI::_internal_y_width() const {
  return y_width_;
}
inline int32_t ROI::y_width() const {
  // @@protoc_insertion_point(field_get:TSF.ROI.y_width)
  return _internal_y_width();
}
inline void ROI::_internal_set_y_width(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  y_width_ = value;
}
inline void ROI::set_y_width(int32_t value) {
  _internal_set_y_width(value);
  // @@protoc_insertion_point(field_set:TSF.ROI.y_width)
}

// -------------------------------------------------------------------

// SpotList

// required int32 application_id = 1 [default = 1];
inline bool SpotList::_internal_has_application_id() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SpotList::has_application_id() const {
  return _internal_has_application_id();
}
inline void SpotList::clear_application_id() {
  application_id_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t SpotList::_internal_application_id() const {
  return application_id_;
}
inline int32_t SpotList::application_id() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.application_id)
  return _internal_application_id();
}
inline void SpotList::_internal_set_application_id(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  application_id_ = value;
}
inline void SpotList::set_application_id(int32_t value) {
  _internal_set_application_id(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.application_id)
}

// optional string name = 2;
inline bool SpotList::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpotList::has_name() const {
  return _internal_has_name();
}
inline void SpotList::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpotList::name() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotList::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSF.SpotList.name)
}
inline std::string* SpotList::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TSF.SpotList.name)
  return _s;
}
inline const std::string& SpotList::_internal_name() const {
  return name_.Get();
}
inline void SpotList::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpotList::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpotList::release_name() {
  // @@protoc_insertion_point(field_release:TSF.SpotList.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpotList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSF.SpotList.name)
}

// optional string filepath = 3;
inline bool SpotList::_internal_has_filepath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpotList::has_filepath() const {
  return _internal_has_filepath();
}
inline void SpotList::clear_filepath() {
  filepath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpotList::filepath() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.filepath)
  return _internal_filepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpotList::set_filepath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSF.SpotList.filepath)
}
inline std::string* SpotList::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:TSF.SpotList.filepath)
  return _s;
}
inline const std::string& SpotList::_internal_filepath() const {
  return filepath_.Get();
}
inline void SpotList::_internal_set_filepath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpotList::_internal_mutable_filepath() {
  _has_bits_[0] |= 0x00000002u;
  return filepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpotList::release_filepath() {
  // @@protoc_insertion_point(field_release:TSF.SpotList.filepath)
  if (!_internal_has_filepath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filepath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filepath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpotList::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filepath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSF.SpotList.filepath)
}

// optional int64 uid = 4;
inline bool SpotList::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpotList::has_uid() const {
  return _internal_has_uid();
}
inline void SpotList::clear_uid() {
  uid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t SpotList::_internal_uid() const {
  return uid_;
}
inline int64_t SpotList::uid() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.uid)
  return _internal_uid();
}
inline void SpotList::_internal_set_uid(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
}
inline void SpotList::set_uid(int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.uid)
}

// optional int32 nr_pixels_x = 5;
inline bool SpotList::_internal_has_nr_pixels_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpotList::has_nr_pixels_x() const {
  return _internal_has_nr_pixels_x();
}
inline void SpotList::clear_nr_pixels_x() {
  nr_pixels_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t SpotList::_internal_nr_pixels_x() const {
  return nr_pixels_x_;
}
inline int32_t SpotList::nr_pixels_x() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_pixels_x)
  return _internal_nr_pixels_x();
}
inline void SpotList::_internal_set_nr_pixels_x(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  nr_pixels_x_ = value;
}
inline void SpotList::set_nr_pixels_x(int32_t value) {
  _internal_set_nr_pixels_x(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_pixels_x)
}

// optional int32 nr_pixels_y = 6;
inline bool SpotList::_internal_has_nr_pixels_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpotList::has_nr_pixels_y() const {
  return _internal_has_nr_pixels_y();
}
inline void SpotList::clear_nr_pixels_y() {
  nr_pixels_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t SpotList::_internal_nr_pixels_y() const {
  return nr_pixels_y_;
}
inline int32_t SpotList::nr_pixels_y() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_pixels_y)
  return _internal_nr_pixels_y();
}
inline void SpotList::_internal_set_nr_pixels_y(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  nr_pixels_y_ = value;
}
inline void SpotList::set_nr_pixels_y(int32_t value) {
  _internal_set_nr_pixels_y(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_pixels_y)
}

// optional float pixel_size = 7;
inline bool SpotList::_internal_has_pixel_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SpotList::has_pixel_size() const {
  return _internal_has_pixel_size();
}
inline void SpotList::clear_pixel_size() {
  pixel_size_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SpotList::_internal_pixel_size() const {
  return pixel_size_;
}
inline float SpotList::pixel_size() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.pixel_size)
  return _internal_pixel_size();
}
inline void SpotList::_internal_set_pixel_size(float value) {
  _has_bits_[0] |= 0x00000080u;
  pixel_size_ = value;
}
inline void SpotList::set_pixel_size(float value) {
  _internal_set_pixel_size(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.pixel_size)
}

// optional int64 nr_spots = 8;
inline bool SpotList::_internal_has_nr_spots() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SpotList::has_nr_spots() const {
  return _internal_has_nr_spots();
}
inline void SpotList::clear_nr_spots() {
  nr_spots_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t SpotList::_internal_nr_spots() const {
  return nr_spots_;
}
inline int64_t SpotList::nr_spots() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_spots)
  return _internal_nr_spots();
}
inline void SpotList::_internal_set_nr_spots(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  nr_spots_ = value;
}
inline void SpotList::set_nr_spots(int64_t value) {
  _internal_set_nr_spots(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_spots)
}

// optional int32 box_size = 17;
inline bool SpotList::_internal_has_box_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SpotList::has_box_size() const {
  return _internal_has_box_size();
}
inline void SpotList::clear_box_size() {
  box_size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t SpotList::_internal_box_size() const {
  return box_size_;
}
inline int32_t SpotList::box_size() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.box_size)
  return _internal_box_size();
}
inline void SpotList::_internal_set_box_size(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  box_size_ = value;
}
inline void SpotList::set_box_size(int32_t value) {
  _internal_set_box_size(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.box_size)
}

// optional int32 nr_channels = 18;
inline bool SpotList::_internal_has_nr_channels() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SpotList::has_nr_channels() const {
  return _internal_has_nr_channels();
}
inline void SpotList::clear_nr_channels() {
  nr_channels_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t SpotList::_internal_nr_channels() const {
  return nr_channels_;
}
inline int32_t SpotList::nr_channels() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_channels)
  return _internal_nr_channels();
}
inline void SpotList::_internal_set_nr_channels(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  nr_channels_ = value;
}
inline void SpotList::set_nr_channels(int32_t value) {
  _internal_set_nr_channels(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_channels)
}

// optional int32 nr_frames = 19;
inline bool SpotList::_internal_has_nr_frames() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SpotList::has_nr_frames() const {
  return _internal_has_nr_frames();
}
inline void SpotList::clear_nr_frames() {
  nr_frames_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t SpotList::_internal_nr_frames() const {
  return nr_frames_;
}
inline int32_t SpotList::nr_frames() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_frames)
  return _internal_nr_frames();
}
inline void SpotList::_internal_set_nr_frames(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  nr_frames_ = value;
}
inline void SpotList::set_nr_frames(int32_t value) {
  _internal_set_nr_frames(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_frames)
}

// optional int32 nr_slices = 20;
inline bool SpotList::_internal_has_nr_slices() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SpotList::has_nr_slices() const {
  return _internal_has_nr_slices();
}
inline void SpotList::clear_nr_slices() {
  nr_slices_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t SpotList::_internal_nr_slices() const {
  return nr_slices_;
}
inline int32_t SpotList::nr_slices() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_slices)
  return _internal_nr_slices();
}
inline void SpotList::_internal_set_nr_slices(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  nr_slices_ = value;
}
inline void SpotList::set_nr_slices(int32_t value) {
  _internal_set_nr_slices(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_slices)
}

// optional int32 nr_pos = 21;
inline bool SpotList::_internal_has_nr_pos() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SpotList::has_nr_pos() const {
  return _internal_has_nr_pos();
}
inline void SpotList::clear_nr_pos() {
  nr_pos_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t SpotList::_internal_nr_pos() const {
  return nr_pos_;
}
inline int32_t SpotList::nr_pos() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.nr_pos)
  return _internal_nr_pos();
}
inline void SpotList::_internal_set_nr_pos(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  nr_pos_ = value;
}
inline void SpotList::set_nr_pos(int32_t value) {
  _internal_set_nr_pos(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.nr_pos)
}

// repeated .TSF.FluorophoreType fluorophore_types = 26;
inline int SpotList::_internal_fluorophore_types_size() const {
  return fluorophore_types_.size();
}
inline int SpotList::fluorophore_types_size() const {
  return _internal_fluorophore_types_size();
}
inline void SpotList::clear_fluorophore_types() {
  fluorophore_types_.Clear();
}
inline ::TSF::FluorophoreType* SpotList::mutable_fluorophore_types(int index) {
  // @@protoc_insertion_point(field_mutable:TSF.SpotList.fluorophore_types)
  return fluorophore_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSF::FluorophoreType >*
SpotList::mutable_fluorophore_types() {
  // @@protoc_insertion_point(field_mutable_list:TSF.SpotList.fluorophore_types)
  return &fluorophore_types_;
}
inline const ::TSF::FluorophoreType& SpotList::_internal_fluorophore_types(int index) const {
  return fluorophore_types_.Get(index);
}
inline const ::TSF::FluorophoreType& SpotList::fluorophore_types(int index) const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.fluorophore_types)
  return _internal_fluorophore_types(index);
}
inline ::TSF::FluorophoreType* SpotList::_internal_add_fluorophore_types() {
  return fluorophore_types_.Add();
}
inline ::TSF::FluorophoreType* SpotList::add_fluorophore_types() {
  ::TSF::FluorophoreType* _add = _internal_add_fluorophore_types();
  // @@protoc_insertion_point(field_add:TSF.SpotList.fluorophore_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSF::FluorophoreType >&
SpotList::fluorophore_types() const {
  // @@protoc_insertion_point(field_list:TSF.SpotList.fluorophore_types)
  return fluorophore_types_;
}

// optional .TSF.LocationUnits location_units = 22;
inline bool SpotList::_internal_has_location_units() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SpotList::has_location_units() const {
  return _internal_has_location_units();
}
inline void SpotList::clear_location_units() {
  location_units_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::TSF::LocationUnits SpotList::_internal_location_units() const {
  return static_cast< ::TSF::LocationUnits >(location_units_);
}
inline ::TSF::LocationUnits SpotList::location_units() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.location_units)
  return _internal_location_units();
}
inline void SpotList::_internal_set_location_units(::TSF::LocationUnits value) {
  assert(::TSF::LocationUnits_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  location_units_ = value;
}
inline void SpotList::set_location_units(::TSF::LocationUnits value) {
  _internal_set_location_units(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.location_units)
}

// optional .TSF.IntensityUnits intensity_units = 23;
inline bool SpotList::_internal_has_intensity_units() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SpotList::has_intensity_units() const {
  return _internal_has_intensity_units();
}
inline void SpotList::clear_intensity_units() {
  intensity_units_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::TSF::IntensityUnits SpotList::_internal_intensity_units() const {
  return static_cast< ::TSF::IntensityUnits >(intensity_units_);
}
inline ::TSF::IntensityUnits SpotList::intensity_units() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.intensity_units)
  return _internal_intensity_units();
}
inline void SpotList::_internal_set_intensity_units(::TSF::IntensityUnits value) {
  assert(::TSF::IntensityUnits_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  intensity_units_ = value;
}
inline void SpotList::set_intensity_units(::TSF::IntensityUnits value) {
  _internal_set_intensity_units(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.intensity_units)
}

// optional .TSF.ThetaUnits theta_units = 27;
inline bool SpotList::_internal_has_theta_units() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SpotList::has_theta_units() const {
  return _internal_has_theta_units();
}
inline void SpotList::clear_theta_units() {
  theta_units_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::TSF::ThetaUnits SpotList::_internal_theta_units() const {
  return static_cast< ::TSF::ThetaUnits >(theta_units_);
}
inline ::TSF::ThetaUnits SpotList::theta_units() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.theta_units)
  return _internal_theta_units();
}
inline void SpotList::_internal_set_theta_units(::TSF::ThetaUnits value) {
  assert(::TSF::ThetaUnits_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  theta_units_ = value;
}
inline void SpotList::set_theta_units(::TSF::ThetaUnits value) {
  _internal_set_theta_units(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.theta_units)
}

// optional .TSF.FitMode fit_mode = 24;
inline bool SpotList::_internal_has_fit_mode() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SpotList::has_fit_mode() const {
  return _internal_has_fit_mode();
}
inline void SpotList::clear_fit_mode() {
  fit_mode_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::TSF::FitMode SpotList::_internal_fit_mode() const {
  return static_cast< ::TSF::FitMode >(fit_mode_);
}
inline ::TSF::FitMode SpotList::fit_mode() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.fit_mode)
  return _internal_fit_mode();
}
inline void SpotList::_internal_set_fit_mode(::TSF::FitMode value) {
  assert(::TSF::FitMode_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  fit_mode_ = value;
}
inline void SpotList::set_fit_mode(::TSF::FitMode value) {
  _internal_set_fit_mode(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.fit_mode)
}

// optional bool is_track = 25 [default = false];
inline bool SpotList::_internal_has_is_track() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SpotList::has_is_track() const {
  return _internal_has_is_track();
}
inline void SpotList::clear_is_track() {
  is_track_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool SpotList::_internal_is_track() const {
  return is_track_;
}
inline bool SpotList::is_track() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.is_track)
  return _internal_is_track();
}
inline void SpotList::_internal_set_is_track(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_track_ = value;
}
inline void SpotList::set_is_track(bool value) {
  _internal_set_is_track(value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.is_track)
}

// repeated double ecf = 28;
inline int SpotList::_internal_ecf_size() const {
  return ecf_.size();
}
inline int SpotList::ecf_size() const {
  return _internal_ecf_size();
}
inline void SpotList::clear_ecf() {
  ecf_.Clear();
}
inline double SpotList::_internal_ecf(int index) const {
  return ecf_.Get(index);
}
inline double SpotList::ecf(int index) const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.ecf)
  return _internal_ecf(index);
}
inline void SpotList::set_ecf(int index, double value) {
  ecf_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.ecf)
}
inline void SpotList::_internal_add_ecf(double value) {
  ecf_.Add(value);
}
inline void SpotList::add_ecf(double value) {
  _internal_add_ecf(value);
  // @@protoc_insertion_point(field_add:TSF.SpotList.ecf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SpotList::_internal_ecf() const {
  return ecf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SpotList::ecf() const {
  // @@protoc_insertion_point(field_list:TSF.SpotList.ecf)
  return _internal_ecf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SpotList::_internal_mutable_ecf() {
  return &ecf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SpotList::mutable_ecf() {
  // @@protoc_insertion_point(field_mutable_list:TSF.SpotList.ecf)
  return _internal_mutable_ecf();
}

// repeated double qe = 30;
inline int SpotList::_internal_qe_size() const {
  return qe_.size();
}
inline int SpotList::qe_size() const {
  return _internal_qe_size();
}
inline void SpotList::clear_qe() {
  qe_.Clear();
}
inline double SpotList::_internal_qe(int index) const {
  return qe_.Get(index);
}
inline double SpotList::qe(int index) const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.qe)
  return _internal_qe(index);
}
inline void SpotList::set_qe(int index, double value) {
  qe_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSF.SpotList.qe)
}
inline void SpotList::_internal_add_qe(double value) {
  qe_.Add(value);
}
inline void SpotList::add_qe(double value) {
  _internal_add_qe(value);
  // @@protoc_insertion_point(field_add:TSF.SpotList.qe)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SpotList::_internal_qe() const {
  return qe_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SpotList::qe() const {
  // @@protoc_insertion_point(field_list:TSF.SpotList.qe)
  return _internal_qe();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SpotList::_internal_mutable_qe() {
  return &qe_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SpotList::mutable_qe() {
  // @@protoc_insertion_point(field_mutable_list:TSF.SpotList.qe)
  return _internal_mutable_qe();
}

// optional .TSF.ROI roi = 29;
inline bool SpotList::_internal_has_roi() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || roi_ != nullptr);
  return value;
}
inline bool SpotList::has_roi() const {
  return _internal_has_roi();
}
inline void SpotList::clear_roi() {
  if (roi_ != nullptr) roi_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSF::ROI& SpotList::_internal_roi() const {
  const ::TSF::ROI* p = roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSF::ROI&>(
      ::TSF::_ROI_default_instance_);
}
inline const ::TSF::ROI& SpotList::roi() const {
  // @@protoc_insertion_point(field_get:TSF.SpotList.roi)
  return _internal_roi();
}
inline void SpotList::unsafe_arena_set_allocated_roi(
    ::TSF::ROI* roi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  roi_ = roi;
  if (roi) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSF.SpotList.roi)
}
inline ::TSF::ROI* SpotList::release_roi() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSF::ROI* temp = roi_;
  roi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSF::ROI* SpotList::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:TSF.SpotList.roi)
  _has_bits_[0] &= ~0x00000004u;
  ::TSF::ROI* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::TSF::ROI* SpotList::_internal_mutable_roi() {
  _has_bits_[0] |= 0x00000004u;
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSF::ROI>(GetArenaForAllocation());
    roi_ = p;
  }
  return roi_;
}
inline ::TSF::ROI* SpotList::mutable_roi() {
  ::TSF::ROI* _msg = _internal_mutable_roi();
  // @@protoc_insertion_point(field_mutable:TSF.SpotList.roi)
  return _msg;
}
inline void SpotList::set_allocated_roi(::TSF::ROI* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete roi_;
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSF::ROI>::GetOwningArena(roi);
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:TSF.SpotList.roi)
}

// -------------------------------------------------------------------

// Spot

// required int32 molecule = 1;
inline bool Spot::_internal_has_molecule() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Spot::has_molecule() const {
  return _internal_has_molecule();
}
inline void Spot::clear_molecule() {
  molecule_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Spot::_internal_molecule() const {
  return molecule_;
}
inline int32_t Spot::molecule() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.molecule)
  return _internal_molecule();
}
inline void Spot::_internal_set_molecule(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  molecule_ = value;
}
inline void Spot::set_molecule(int32_t value) {
  _internal_set_molecule(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.molecule)
}

// required int32 channel = 2;
inline bool Spot::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Spot::has_channel() const {
  return _internal_has_channel();
}
inline void Spot::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Spot::_internal_channel() const {
  return channel_;
}
inline int32_t Spot::channel() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.channel)
  return _internal_channel();
}
inline void Spot::_internal_set_channel(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  channel_ = value;
}
inline void Spot::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.channel)
}

// required int32 frame = 3;
inline bool Spot::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Spot::has_frame() const {
  return _internal_has_frame();
}
inline void Spot::clear_frame() {
  frame_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Spot::_internal_frame() const {
  return frame_;
}
inline int32_t Spot::frame() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.frame)
  return _internal_frame();
}
inline void Spot::_internal_set_frame(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  frame_ = value;
}
inline void Spot::set_frame(int32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.frame)
}

// optional int32 slice = 4;
inline bool Spot::_internal_has_slice() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Spot::has_slice() const {
  return _internal_has_slice();
}
inline void Spot::clear_slice() {
  slice_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Spot::_internal_slice() const {
  return slice_;
}
inline int32_t Spot::slice() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.slice)
  return _internal_slice();
}
inline void Spot::_internal_set_slice(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  slice_ = value;
}
inline void Spot::set_slice(int32_t value) {
  _internal_set_slice(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.slice)
}

// optional int32 pos = 5;
inline bool Spot::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Spot::has_pos() const {
  return _internal_has_pos();
}
inline void Spot::clear_pos() {
  pos_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t Spot::_internal_pos() const {
  return pos_;
}
inline int32_t Spot::pos() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.pos)
  return _internal_pos();
}
inline void Spot::_internal_set_pos(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  pos_ = value;
}
inline void Spot::set_pos(int32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.pos)
}

// optional int32 fluorophore_type = 19;
inline bool Spot::_internal_has_fluorophore_type() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Spot::has_fluorophore_type() const {
  return _internal_has_fluorophore_type();
}
inline void Spot::clear_fluorophore_type() {
  fluorophore_type_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t Spot::_internal_fluorophore_type() const {
  return fluorophore_type_;
}
inline int32_t Spot::fluorophore_type() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.fluorophore_type)
  return _internal_fluorophore_type();
}
inline void Spot::_internal_set_fluorophore_type(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  fluorophore_type_ = value;
}
inline void Spot::set_fluorophore_type(int32_t value) {
  _internal_set_fluorophore_type(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.fluorophore_type)
}

// optional int32 cluster = 20;
inline bool Spot::_internal_has_cluster() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Spot::has_cluster() const {
  return _internal_has_cluster();
}
inline void Spot::clear_cluster() {
  cluster_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t Spot::_internal_cluster() const {
  return cluster_;
}
inline int32_t Spot::cluster() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.cluster)
  return _internal_cluster();
}
inline void Spot::_internal_set_cluster(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  cluster_ = value;
}
inline void Spot::set_cluster(int32_t value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.cluster)
}

// optional .TSF.LocationUnits location_units = 17;
inline bool Spot::_internal_has_location_units() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Spot::has_location_units() const {
  return _internal_has_location_units();
}
inline void Spot::clear_location_units() {
  location_units_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::TSF::LocationUnits Spot::_internal_location_units() const {
  return static_cast< ::TSF::LocationUnits >(location_units_);
}
inline ::TSF::LocationUnits Spot::location_units() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.location_units)
  return _internal_location_units();
}
inline void Spot::_internal_set_location_units(::TSF::LocationUnits value) {
  assert(::TSF::LocationUnits_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  location_units_ = value;
}
inline void Spot::set_location_units(::TSF::LocationUnits value) {
  _internal_set_location_units(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.location_units)
}

// required float x = 7;
inline bool Spot::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Spot::has_x() const {
  return _internal_has_x();
}
inline void Spot::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Spot::_internal_x() const {
  return x_;
}
inline float Spot::x() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.x)
  return _internal_x();
}
inline void Spot::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
}
inline void Spot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.x)
}

// required float y = 8;
inline bool Spot::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Spot::has_y() const {
  return _internal_has_y();
}
inline void Spot::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Spot::_internal_y() const {
  return y_;
}
inline float Spot::y() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.y)
  return _internal_y();
}
inline void Spot::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
}
inline void Spot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.y)
}

// optional float z = 9;
inline bool Spot::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Spot::has_z() const {
  return _internal_has_z();
}
inline void Spot::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Spot::_internal_z() const {
  return z_;
}
inline float Spot::z() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.z)
  return _internal_z();
}
inline void Spot::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000080u;
  z_ = value;
}
inline void Spot::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.z)
}

// optional .TSF.IntensityUnits intensity_units = 18;
inline bool Spot::_internal_has_intensity_units() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Spot::has_intensity_units() const {
  return _internal_has_intensity_units();
}
inline void Spot::clear_intensity_units() {
  intensity_units_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::TSF::IntensityUnits Spot::_internal_intensity_units() const {
  return static_cast< ::TSF::IntensityUnits >(intensity_units_);
}
inline ::TSF::IntensityUnits Spot::intensity_units() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.intensity_units)
  return _internal_intensity_units();
}
inline void Spot::_internal_set_intensity_units(::TSF::IntensityUnits value) {
  assert(::TSF::IntensityUnits_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  intensity_units_ = value;
}
inline void Spot::set_intensity_units(::TSF::IntensityUnits value) {
  _internal_set_intensity_units(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.intensity_units)
}

// required float intensity = 10;
inline bool Spot::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Spot::has_intensity() const {
  return _internal_has_intensity();
}
inline void Spot::clear_intensity() {
  intensity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Spot::_internal_intensity() const {
  return intensity_;
}
inline float Spot::intensity() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.intensity)
  return _internal_intensity();
}
inline void Spot::_internal_set_intensity(float value) {
  _has_bits_[0] |= 0x00000100u;
  intensity_ = value;
}
inline void Spot::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.intensity)
}

// optional float background = 11;
inline bool Spot::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Spot::has_background() const {
  return _internal_has_background();
}
inline void Spot::clear_background() {
  background_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Spot::_internal_background() const {
  return background_;
}
inline float Spot::background() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.background)
  return _internal_background();
}
inline void Spot::_internal_set_background(float value) {
  _has_bits_[0] |= 0x00000200u;
  background_ = value;
}
inline void Spot::set_background(float value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.background)
}

// optional float width = 12;
inline bool Spot::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Spot::has_width() const {
  return _internal_has_width();
}
inline void Spot::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Spot::_internal_width() const {
  return width_;
}
inline float Spot::width() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.width)
  return _internal_width();
}
inline void Spot::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000400u;
  width_ = value;
}
inline void Spot::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.width)
}

// optional float a = 13;
inline bool Spot::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Spot::has_a() const {
  return _internal_has_a();
}
inline void Spot::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Spot::_internal_a() const {
  return a_;
}
inline float Spot::a() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.a)
  return _internal_a();
}
inline void Spot::_internal_set_a(float value) {
  _has_bits_[0] |= 0x00000800u;
  a_ = value;
}
inline void Spot::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.a)
}

// optional float theta = 14;
inline bool Spot::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Spot::has_theta() const {
  return _internal_has_theta();
}
inline void Spot::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Spot::_internal_theta() const {
  return theta_;
}
inline float Spot::theta() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.theta)
  return _internal_theta();
}
inline void Spot::_internal_set_theta(float value) {
  _has_bits_[0] |= 0x00001000u;
  theta_ = value;
}
inline void Spot::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.theta)
}

// optional float x_original = 101;
inline bool Spot::_internal_has_x_original() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Spot::has_x_original() const {
  return _internal_has_x_original();
}
inline void Spot::clear_x_original() {
  x_original_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float Spot::_internal_x_original() const {
  return x_original_;
}
inline float Spot::x_original() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.x_original)
  return _internal_x_original();
}
inline void Spot::_internal_set_x_original(float value) {
  _has_bits_[0] |= 0x00040000u;
  x_original_ = value;
}
inline void Spot::set_x_original(float value) {
  _internal_set_x_original(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.x_original)
}

// optional float y_original = 102;
inline bool Spot::_internal_has_y_original() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Spot::has_y_original() const {
  return _internal_has_y_original();
}
inline void Spot::clear_y_original() {
  y_original_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float Spot::_internal_y_original() const {
  return y_original_;
}
inline float Spot::y_original() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.y_original)
  return _internal_y_original();
}
inline void Spot::_internal_set_y_original(float value) {
  _has_bits_[0] |= 0x00080000u;
  y_original_ = value;
}
inline void Spot::set_y_original(float value) {
  _internal_set_y_original(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.y_original)
}

// optional float z_original = 103;
inline bool Spot::_internal_has_z_original() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Spot::has_z_original() const {
  return _internal_has_z_original();
}
inline void Spot::clear_z_original() {
  z_original_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float Spot::_internal_z_original() const {
  return z_original_;
}
inline float Spot::z_original() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.z_original)
  return _internal_z_original();
}
inline void Spot::_internal_set_z_original(float value) {
  _has_bits_[0] |= 0x00100000u;
  z_original_ = value;
}
inline void Spot::set_z_original(float value) {
  _internal_set_z_original(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.z_original)
}

// optional float x_precision = 104;
inline bool Spot::_internal_has_x_precision() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Spot::has_x_precision() const {
  return _internal_has_x_precision();
}
inline void Spot::clear_x_precision() {
  x_precision_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float Spot::_internal_x_precision() const {
  return x_precision_;
}
inline float Spot::x_precision() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.x_precision)
  return _internal_x_precision();
}
inline void Spot::_internal_set_x_precision(float value) {
  _has_bits_[0] |= 0x00200000u;
  x_precision_ = value;
}
inline void Spot::set_x_precision(float value) {
  _internal_set_x_precision(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.x_precision)
}

// optional float y_precision = 105;
inline bool Spot::_internal_has_y_precision() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Spot::has_y_precision() const {
  return _internal_has_y_precision();
}
inline void Spot::clear_y_precision() {
  y_precision_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float Spot::_internal_y_precision() const {
  return y_precision_;
}
inline float Spot::y_precision() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.y_precision)
  return _internal_y_precision();
}
inline void Spot::_internal_set_y_precision(float value) {
  _has_bits_[0] |= 0x00400000u;
  y_precision_ = value;
}
inline void Spot::set_y_precision(float value) {
  _internal_set_y_precision(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.y_precision)
}

// optional float z_precision = 106;
inline bool Spot::_internal_has_z_precision() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Spot::has_z_precision() const {
  return _internal_has_z_precision();
}
inline void Spot::clear_z_precision() {
  z_precision_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float Spot::_internal_z_precision() const {
  return z_precision_;
}
inline float Spot::z_precision() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.z_precision)
  return _internal_z_precision();
}
inline void Spot::_internal_set_z_precision(float value) {
  _has_bits_[0] |= 0x00800000u;
  z_precision_ = value;
}
inline void Spot::set_z_precision(float value) {
  _internal_set_z_precision(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.z_precision)
}

// optional int32 x_position = 107;
inline bool Spot::_internal_has_x_position() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Spot::has_x_position() const {
  return _internal_has_x_position();
}
inline void Spot::clear_x_position() {
  x_position_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline int32_t Spot::_internal_x_position() const {
  return x_position_;
}
inline int32_t Spot::x_position() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.x_position)
  return _internal_x_position();
}
inline void Spot::_internal_set_x_position(int32_t value) {
  _has_bits_[0] |= 0x01000000u;
  x_position_ = value;
}
inline void Spot::set_x_position(int32_t value) {
  _internal_set_x_position(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.x_position)
}

// optional int32 y_position = 108;
inline bool Spot::_internal_has_y_position() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Spot::has_y_position() const {
  return _internal_has_y_position();
}
inline void Spot::clear_y_position() {
  y_position_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t Spot::_internal_y_position() const {
  return y_position_;
}
inline int32_t Spot::y_position() const {
  // @@protoc_insertion_point(field_get:TSF.Spot.y_position)
  return _internal_y_position();
}
inline void Spot::_internal_set_y_position(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  y_position_ = value;
}
inline void Spot::set_y_position(int32_t value) {
  _internal_set_y_position(value);
  // @@protoc_insertion_point(field_set:TSF.Spot.y_position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSF

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSF::FitMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSF::FitMode>() {
  return ::TSF::FitMode_descriptor();
}
template <> struct is_proto_enum< ::TSF::ThetaUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSF::ThetaUnits>() {
  return ::TSF::ThetaUnits_descriptor();
}
template <> struct is_proto_enum< ::TSF::IntensityUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSF::IntensityUnits>() {
  return ::TSF::IntensityUnits_descriptor();
}
template <> struct is_proto_enum< ::TSF::LocationUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSF::LocationUnits>() {
  return ::TSF::LocationUnits_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSFProto_2eproto
