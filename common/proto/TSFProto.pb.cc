// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSFProto.proto

#include "TSFProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSF {
constexpr FluorophoreType::FluorophoreType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , is_fiducial_(false){}
struct FluorophoreTypeDefaultTypeInternal {
  constexpr FluorophoreTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FluorophoreTypeDefaultTypeInternal() {}
  union {
    FluorophoreType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FluorophoreTypeDefaultTypeInternal _FluorophoreType_default_instance_;
constexpr ROI::ROI(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , x_width_(0)
  , y_width_(0){}
struct ROIDefaultTypeInternal {
  constexpr ROIDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROIDefaultTypeInternal() {}
  union {
    ROI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROIDefaultTypeInternal _ROI_default_instance_;
constexpr SpotList::SpotList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fluorophore_types_()
  , ecf_()
  , qe_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roi_(nullptr)
  , uid_(int64_t{0})
  , nr_pixels_x_(0)
  , nr_pixels_y_(0)
  , nr_spots_(int64_t{0})
  , pixel_size_(0)
  , box_size_(0)
  , nr_channels_(0)
  , nr_frames_(0)
  , nr_slices_(0)
  , nr_pos_(0)
  , location_units_(0)

  , intensity_units_(0)

  , theta_units_(0)

  , fit_mode_(0)

  , is_track_(false)
  , application_id_(1){}
struct SpotListDefaultTypeInternal {
  constexpr SpotListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpotListDefaultTypeInternal() {}
  union {
    SpotList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpotListDefaultTypeInternal _SpotList_default_instance_;
constexpr Spot::Spot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : molecule_(0)
  , channel_(0)
  , frame_(0)
  , slice_(0)
  , pos_(0)
  , x_(0)
  , y_(0)
  , z_(0)
  , intensity_(0)
  , background_(0)
  , width_(0)
  , a_(0)
  , theta_(0)
  , location_units_(0)

  , intensity_units_(0)

  , fluorophore_type_(0)
  , y_position_(0)
  , cluster_(0)
  , x_original_(0)
  , y_original_(0)
  , z_original_(0)
  , x_precision_(0)
  , y_precision_(0)
  , z_precision_(0)
  , x_position_(0){}
struct SpotDefaultTypeInternal {
  constexpr SpotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpotDefaultTypeInternal() {}
  union {
    Spot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpotDefaultTypeInternal _Spot_default_instance_;
}  // namespace TSF
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSFProto_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSFProto_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSFProto_2eproto = nullptr;

const uint32_t TableStruct_TSFProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSF::FluorophoreType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSF::FluorophoreType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSF::FluorophoreType, id_),
  PROTOBUF_FIELD_OFFSET(::TSF::FluorophoreType, description_),
  PROTOBUF_FIELD_OFFSET(::TSF::FluorophoreType, is_fiducial_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSF::ROI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSF::ROI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSF::ROI, x_),
  PROTOBUF_FIELD_OFFSET(::TSF::ROI, y_),
  PROTOBUF_FIELD_OFFSET(::TSF::ROI, x_width_),
  PROTOBUF_FIELD_OFFSET(::TSF::ROI, y_width_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, application_id_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, name_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, filepath_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, uid_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_pixels_x_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_pixels_y_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, pixel_size_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_spots_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, box_size_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_channels_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_frames_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_slices_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, nr_pos_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, fluorophore_types_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, location_units_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, intensity_units_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, theta_units_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, fit_mode_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, is_track_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, ecf_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, qe_),
  PROTOBUF_FIELD_OFFSET(::TSF::SpotList, roi_),
  18,
  0,
  1,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  10,
  11,
  12,
  ~0u,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, molecule_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, channel_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, frame_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, slice_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, pos_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, fluorophore_type_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, cluster_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, location_units_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, x_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, y_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, z_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, intensity_units_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, intensity_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, background_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, width_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, a_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, theta_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, x_original_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, y_original_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, z_original_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, x_precision_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, y_precision_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, z_precision_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, x_position_),
  PROTOBUF_FIELD_OFFSET(::TSF::Spot, y_position_),
  0,
  1,
  2,
  3,
  4,
  15,
  17,
  13,
  5,
  6,
  7,
  14,
  8,
  9,
  10,
  11,
  12,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  16,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TSF::FluorophoreType)},
  { 12, 22, -1, sizeof(::TSF::ROI)},
  { 26, 54, -1, sizeof(::TSF::SpotList)},
  { 76, 107, -1, sizeof(::TSF::Spot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSF::_FluorophoreType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSF::_ROI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSF::_SpotList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSF::_Spot_default_instance_),
};

const char descriptor_table_protodef_TSFProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016TSFProto.proto\022\003TSF\"G\n\017FluorophoreType"
  "\022\n\n\002id\030\001 \002(\005\022\023\n\013description\030\002 \001(\t\022\023\n\013is_"
  "fiducial\030\003 \001(\010\"=\n\003ROI\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
  "\002(\005\022\017\n\007x_width\030\003 \002(\005\022\017\n\007y_width\030\004 \002(\005\"\241\004"
  "\n\010SpotList\022\031\n\016application_id\030\001 \002(\005:\0011\022\014\n"
  "\004name\030\002 \001(\t\022\020\n\010filepath\030\003 \001(\t\022\013\n\003uid\030\004 \001"
  "(\003\022\023\n\013nr_pixels_x\030\005 \001(\005\022\023\n\013nr_pixels_y\030\006"
  " \001(\005\022\022\n\npixel_size\030\007 \001(\002\022\020\n\010nr_spots\030\010 \001"
  "(\003\022\020\n\010box_size\030\021 \001(\005\022\023\n\013nr_channels\030\022 \001("
  "\005\022\021\n\tnr_frames\030\023 \001(\005\022\021\n\tnr_slices\030\024 \001(\005\022"
  "\016\n\006nr_pos\030\025 \001(\005\022/\n\021fluorophore_types\030\032 \003"
  "(\0132\024.TSF.FluorophoreType\022*\n\016location_uni"
  "ts\030\026 \001(\0162\022.TSF.LocationUnits\022,\n\017intensit"
  "y_units\030\027 \001(\0162\023.TSF.IntensityUnits\022$\n\013th"
  "eta_units\030\033 \001(\0162\017.TSF.ThetaUnits\022\036\n\010fit_"
  "mode\030\030 \001(\0162\014.TSF.FitMode\022\027\n\010is_track\030\031 \001"
  "(\010:\005false\022\013\n\003ecf\030\034 \003(\001\022\n\n\002qe\030\036 \003(\001\022\025\n\003ro"
  "i\030\035 \001(\0132\010.TSF.ROI*\006\010\334\013\020\200\020\"\365\003\n\004Spot\022\020\n\010mo"
  "lecule\030\001 \002(\005\022\017\n\007channel\030\002 \002(\005\022\r\n\005frame\030\003"
  " \002(\005\022\r\n\005slice\030\004 \001(\005\022\013\n\003pos\030\005 \001(\005\022\030\n\020fluo"
  "rophore_type\030\023 \001(\005\022\017\n\007cluster\030\024 \001(\005\022*\n\016l"
  "ocation_units\030\021 \001(\0162\022.TSF.LocationUnits\022"
  "\t\n\001x\030\007 \002(\002\022\t\n\001y\030\010 \002(\002\022\t\n\001z\030\t \001(\002\022,\n\017inte"
  "nsity_units\030\022 \001(\0162\023.TSF.IntensityUnits\022\021"
  "\n\tintensity\030\n \002(\002\022\022\n\nbackground\030\013 \001(\002\022\r\n"
  "\005width\030\014 \001(\002\022\t\n\001a\030\r \001(\002\022\r\n\005theta\030\016 \001(\002\022\022"
  "\n\nx_original\030e \001(\002\022\022\n\ny_original\030f \001(\002\022\022"
  "\n\nz_original\030g \001(\002\022\023\n\013x_precision\030h \001(\002\022"
  "\023\n\013y_precision\030i \001(\002\022\023\n\013z_precision\030j \001("
  "\002\022\022\n\nx_position\030k \001(\005\022\022\n\ny_position\030l \001("
  "\005*\006\010\334\013\020\200\020*8\n\007FitMode\022\013\n\007ONEAXIS\020\000\022\013\n\007TWO"
  "AXIS\020\001\022\023\n\017TWOAXISANDTHETA\020\002*&\n\nThetaUnit"
  "s\022\013\n\007DEGREES\020\000\022\013\n\007RADIANS\020\001*)\n\016Intensity"
  "Units\022\n\n\006COUNTS\020\000\022\013\n\007PHOTONS\020\001*+\n\rLocati"
  "onUnits\022\006\n\002NM\020\000\022\006\n\002UM\020\001\022\n\n\006PIXELS\020\002B)\n\024e"
  "du.ucsf.valelab.tsfB\021TaggedSpotsProtos"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSFProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSFProto_2eproto = {
  false, false, 1438, descriptor_table_protodef_TSFProto_2eproto, "TSFProto.proto", 
  &descriptor_table_TSFProto_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_TSFProto_2eproto::offsets,
  file_level_metadata_TSFProto_2eproto, file_level_enum_descriptors_TSFProto_2eproto, file_level_service_descriptors_TSFProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSFProto_2eproto_getter() {
  return &descriptor_table_TSFProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSFProto_2eproto(&descriptor_table_TSFProto_2eproto);
namespace TSF {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FitMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSFProto_2eproto);
  return file_level_enum_descriptors_TSFProto_2eproto[0];
}
bool FitMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThetaUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSFProto_2eproto);
  return file_level_enum_descriptors_TSFProto_2eproto[1];
}
bool ThetaUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntensityUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSFProto_2eproto);
  return file_level_enum_descriptors_TSFProto_2eproto[2];
}
bool IntensityUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSFProto_2eproto);
  return file_level_enum_descriptors_TSFProto_2eproto[3];
}
bool LocationUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FluorophoreType::_Internal {
 public:
  using HasBits = decltype(std::declval<FluorophoreType>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_fiducial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

FluorophoreType::FluorophoreType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSF.FluorophoreType)
}
FluorophoreType::FluorophoreType(const FluorophoreType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_fiducial_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_fiducial_));
  // @@protoc_insertion_point(copy_constructor:TSF.FluorophoreType)
}

inline void FluorophoreType::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_fiducial_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_fiducial_));
}

FluorophoreType::~FluorophoreType() {
  // @@protoc_insertion_point(destructor:TSF.FluorophoreType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FluorophoreType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FluorophoreType::ArenaDtor(void* object) {
  FluorophoreType* _this = reinterpret_cast< FluorophoreType* >(object);
  (void)_this;
}
void FluorophoreType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FluorophoreType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FluorophoreType::Clear() {
// @@protoc_insertion_point(message_clear_start:TSF.FluorophoreType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_fiducial_) -
        reinterpret_cast<char*>(&id_)) + sizeof(is_fiducial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FluorophoreType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSF.FluorophoreType.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_fiducial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_fiducial(&has_bits);
          is_fiducial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FluorophoreType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSF.FluorophoreType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSF.FluorophoreType.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional bool is_fiducial = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_fiducial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSF.FluorophoreType)
  return target;
}

size_t FluorophoreType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSF.FluorophoreType)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // optional bool is_fiducial = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FluorophoreType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FluorophoreType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FluorophoreType::GetClassData() const { return &_class_data_; }

void FluorophoreType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FluorophoreType *>(to)->MergeFrom(
      static_cast<const FluorophoreType &>(from));
}


void FluorophoreType::MergeFrom(const FluorophoreType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSF.FluorophoreType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_fiducial_ = from.is_fiducial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FluorophoreType::CopyFrom(const FluorophoreType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSF.FluorophoreType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluorophoreType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FluorophoreType::InternalSwap(FluorophoreType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FluorophoreType, is_fiducial_)
      + sizeof(FluorophoreType::is_fiducial_)
      - PROTOBUF_FIELD_OFFSET(FluorophoreType, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FluorophoreType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSFProto_2eproto_getter, &descriptor_table_TSFProto_2eproto_once,
      file_level_metadata_TSFProto_2eproto[0]);
}

// ===================================================================

class ROI::_Internal {
 public:
  using HasBits = decltype(std::declval<ROI>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ROI::ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSF.ROI)
}
ROI::ROI(const ROI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_width_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_width_));
  // @@protoc_insertion_point(copy_constructor:TSF.ROI)
}

inline void ROI::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_width_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_width_));
}

ROI::~ROI() {
  // @@protoc_insertion_point(destructor:TSF.ROI)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ROI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ROI::ArenaDtor(void* object) {
  ROI* _this = reinterpret_cast< ROI* >(object);
  (void)_this;
}
void ROI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROI::Clear() {
// @@protoc_insertion_point(message_clear_start:TSF.ROI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_width_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 x_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x_width(&has_bits);
          x_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 y_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y_width(&has_bits);
          y_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSF.ROI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // required int32 x_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x_width(), target);
  }

  // required int32 y_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSF.ROI)
  return target;
}

size_t ROI::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSF.ROI)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  if (_internal_has_x_width()) {
    // required int32 x_width = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x_width());
  }

  if (_internal_has_y_width()) {
    // required int32 y_width = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y_width());
  }

  return total_size;
}
size_t ROI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSF.ROI)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());

    // required int32 y = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());

    // required int32 x_width = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x_width());

    // required int32 y_width = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROI::GetClassData() const { return &_class_data_; }

void ROI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROI *>(to)->MergeFrom(
      static_cast<const ROI &>(from));
}


void ROI::MergeFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSF.ROI)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_width_ = from.x_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_width_ = from.y_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROI::CopyFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSF.ROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROI::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ROI::InternalSwap(ROI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ROI, y_width_)
      + sizeof(ROI::y_width_)
      - PROTOBUF_FIELD_OFFSET(ROI, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ROI::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSFProto_2eproto_getter, &descriptor_table_TSFProto_2eproto_once,
      file_level_metadata_TSFProto_2eproto[1]);
}

// ===================================================================

class SpotList::_Internal {
 public:
  using HasBits = decltype(std::declval<SpotList>()._has_bits_);
  static void set_has_application_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filepath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_pixels_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nr_pixels_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pixel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_nr_spots(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_box_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_nr_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_nr_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_nr_slices(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_nr_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_location_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_intensity_units(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_theta_units(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fit_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_track(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSF::ROI& roi(const SpotList* msg);
  static void set_has_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00040000) ^ 0x00040000) != 0;
  }
};

const ::TSF::ROI&
SpotList::_Internal::roi(const SpotList* msg) {
  return *msg->roi_;
}
SpotList::SpotList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  fluorophore_types_(arena),
  ecf_(arena),
  qe_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSF.SpotList)
}
SpotList::SpotList(const SpotList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fluorophore_types_(from.fluorophore_types_),
      ecf_(from.ecf_),
      qe_(from.qe_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filepath()) {
    filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filepath(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_roi()) {
    roi_ = new ::TSF::ROI(*from.roi_);
  } else {
    roi_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&application_id_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(application_id_));
  // @@protoc_insertion_point(copy_constructor:TSF.SpotList)
}

inline void SpotList::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_track_) -
    reinterpret_cast<char*>(&roi_)) + sizeof(is_track_));
application_id_ = 1;
}

SpotList::~SpotList() {
  // @@protoc_insertion_point(destructor:TSF.SpotList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpotList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete roi_;
}

void SpotList::ArenaDtor(void* object) {
  SpotList* _this = reinterpret_cast< SpotList* >(object);
  (void)_this;
}
void SpotList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpotList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSF.SpotList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  fluorophore_types_.Clear();
  ecf_.Clear();
  qe_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filepath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(roi_ != nullptr);
      roi_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pixel_size_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(pixel_size_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&box_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theta_units_) -
        reinterpret_cast<char*>(&box_size_)) + sizeof(theta_units_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&fit_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_track_) -
        reinterpret_cast<char*>(&fit_mode_)) + sizeof(is_track_));
    application_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 application_id = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_application_id(&has_bits);
          application_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSF.SpotList.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filepath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSF.SpotList.filepath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nr_pixels_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_nr_pixels_x(&has_bits);
          nr_pixels_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nr_pixels_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_nr_pixels_y(&has_bits);
          nr_pixels_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pixel_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_pixel_size(&has_bits);
          pixel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 nr_spots = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_nr_spots(&has_bits);
          nr_spots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 box_size = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_box_size(&has_bits);
          box_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nr_channels = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_nr_channels(&has_bits);
          nr_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nr_frames = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_nr_frames(&has_bits);
          nr_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nr_slices = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_nr_slices(&has_bits);
          nr_slices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nr_pos = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_nr_pos(&has_bits);
          nr_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.LocationUnits location_units = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSF::LocationUnits_IsValid(val))) {
            _internal_set_location_units(static_cast<::TSF::LocationUnits>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.IntensityUnits intensity_units = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSF::IntensityUnits_IsValid(val))) {
            _internal_set_intensity_units(static_cast<::TSF::IntensityUnits>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.FitMode fit_mode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSF::FitMode_IsValid(val))) {
            _internal_set_fit_mode(static_cast<::TSF::FitMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_track = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_is_track(&has_bits);
          is_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSF.FluorophoreType fluorophore_types = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fluorophore_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.ThetaUnits theta_units = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSF::ThetaUnits_IsValid(val))) {
            _internal_set_theta_units(static_cast<::TSF::ThetaUnits>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated double ecf = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ecf(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<225>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ecf(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.ROI roi = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double qe = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_qe(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<241>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_qe(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((12000u <= tag && tag < 16384u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpotList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSF.SpotList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 application_id = 1 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_application_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSF.SpotList.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string filepath = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSF.SpotList.filepath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filepath(), target);
  }

  // optional int64 uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_uid(), target);
  }

  // optional int32 nr_pixels_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nr_pixels_x(), target);
  }

  // optional int32 nr_pixels_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nr_pixels_y(), target);
  }

  // optional float pixel_size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pixel_size(), target);
  }

  // optional int64 nr_spots = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_nr_spots(), target);
  }

  // optional int32 box_size = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_box_size(), target);
  }

  // optional int32 nr_channels = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_nr_channels(), target);
  }

  // optional int32 nr_frames = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_nr_frames(), target);
  }

  // optional int32 nr_slices = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_nr_slices(), target);
  }

  // optional int32 nr_pos = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_nr_pos(), target);
  }

  // optional .TSF.LocationUnits location_units = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_location_units(), target);
  }

  // optional .TSF.IntensityUnits intensity_units = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_intensity_units(), target);
  }

  // optional .TSF.FitMode fit_mode = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_fit_mode(), target);
  }

  // optional bool is_track = 25 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_track(), target);
  }

  // repeated .TSF.FluorophoreType fluorophore_types = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fluorophore_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_fluorophore_types(i), target, stream);
  }

  // optional .TSF.ThetaUnits theta_units = 27;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_theta_units(), target);
  }

  // repeated double ecf = 28;
  for (int i = 0, n = this->_internal_ecf_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_ecf(i), target);
  }

  // optional .TSF.ROI roi = 29;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::roi(this), target, stream);
  }

  // repeated double qe = 30;
  for (int i = 0, n = this->_internal_qe_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_qe(i), target);
  }

  // Extension range [1500, 2048)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1500, 2048, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSF.SpotList)
  return target;
}

size_t SpotList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSF.SpotList)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required int32 application_id = 1 [default = 1];
  if (_internal_has_application_id()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_application_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSF.FluorophoreType fluorophore_types = 26;
  total_size += 2UL * this->_internal_fluorophore_types_size();
  for (const auto& msg : this->fluorophore_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double ecf = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ecf_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ecf_size());
    total_size += data_size;
  }

  // repeated double qe = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_qe_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_qe_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string filepath = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filepath());
    }

    // optional .TSF.ROI roi = 29;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roi_);
    }

    // optional int64 uid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
    }

    // optional int32 nr_pixels_x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nr_pixels_x());
    }

    // optional int32 nr_pixels_y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nr_pixels_y());
    }

    // optional int64 nr_spots = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_nr_spots());
    }

    // optional float pixel_size = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 box_size = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_box_size());
    }

    // optional int32 nr_channels = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nr_channels());
    }

    // optional int32 nr_frames = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nr_frames());
    }

    // optional int32 nr_slices = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nr_slices());
    }

    // optional int32 nr_pos = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nr_pos());
    }

    // optional .TSF.LocationUnits location_units = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location_units());
    }

    // optional .TSF.IntensityUnits intensity_units = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_intensity_units());
    }

    // optional .TSF.ThetaUnits theta_units = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_theta_units());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .TSF.FitMode fit_mode = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fit_mode());
    }

    // optional bool is_track = 25 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpotList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotList::GetClassData() const { return &_class_data_; }

void SpotList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpotList *>(to)->MergeFrom(
      static_cast<const SpotList &>(from));
}


void SpotList::MergeFrom(const SpotList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSF.SpotList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fluorophore_types_.MergeFrom(from.fluorophore_types_);
  ecf_.MergeFrom(from.ecf_);
  qe_.MergeFrom(from.qe_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filepath(from._internal_filepath());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_roi()->::TSF::ROI::MergeFrom(from._internal_roi());
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      nr_pixels_x_ = from.nr_pixels_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      nr_pixels_y_ = from.nr_pixels_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      nr_spots_ = from.nr_spots_;
    }
    if (cached_has_bits & 0x00000080u) {
      pixel_size_ = from.pixel_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      box_size_ = from.box_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      nr_channels_ = from.nr_channels_;
    }
    if (cached_has_bits & 0x00000400u) {
      nr_frames_ = from.nr_frames_;
    }
    if (cached_has_bits & 0x00000800u) {
      nr_slices_ = from.nr_slices_;
    }
    if (cached_has_bits & 0x00001000u) {
      nr_pos_ = from.nr_pos_;
    }
    if (cached_has_bits & 0x00002000u) {
      location_units_ = from.location_units_;
    }
    if (cached_has_bits & 0x00004000u) {
      intensity_units_ = from.intensity_units_;
    }
    if (cached_has_bits & 0x00008000u) {
      theta_units_ = from.theta_units_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      fit_mode_ = from.fit_mode_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_track_ = from.is_track_;
    }
    if (cached_has_bits & 0x00040000u) {
      application_id_ = from.application_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotList::CopyFrom(const SpotList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSF.SpotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotList::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fluorophore_types_))
    return false;
  if (_internal_has_roi()) {
    if (!roi_->IsInitialized()) return false;
  }
  return true;
}

void SpotList::InternalSwap(SpotList* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fluorophore_types_.InternalSwap(&other->fluorophore_types_);
  ecf_.InternalSwap(&other->ecf_);
  qe_.InternalSwap(&other->qe_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filepath_, lhs_arena,
      &other->filepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotList, is_track_)
      + sizeof(SpotList::is_track_)
      - PROTOBUF_FIELD_OFFSET(SpotList, roi_)>(
          reinterpret_cast<char*>(&roi_),
          reinterpret_cast<char*>(&other->roi_));
  swap(application_id_, other->application_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSFProto_2eproto_getter, &descriptor_table_TSFProto_2eproto_once,
      file_level_metadata_TSFProto_2eproto[2]);
}

// ===================================================================

class Spot::_Internal {
 public:
  using HasBits = decltype(std::declval<Spot>()._has_bits_);
  static void set_has_molecule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fluorophore_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_location_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_intensity_units(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_x_original(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_y_original(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_z_original(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_x_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_y_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_z_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_x_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_y_position(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000167) ^ 0x00000167) != 0;
  }
};

Spot::Spot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSF.Spot)
}
Spot::Spot(const Spot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  ::memcpy(&molecule_, &from.molecule_,
    static_cast<size_t>(reinterpret_cast<char*>(&x_position_) -
    reinterpret_cast<char*>(&molecule_)) + sizeof(x_position_));
  // @@protoc_insertion_point(copy_constructor:TSF.Spot)
}

inline void Spot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&molecule_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&x_position_) -
    reinterpret_cast<char*>(&molecule_)) + sizeof(x_position_));
}

Spot::~Spot() {
  // @@protoc_insertion_point(destructor:TSF.Spot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Spot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Spot::ArenaDtor(void* object) {
  Spot* _this = reinterpret_cast< Spot* >(object);
  (void)_this;
}
void Spot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Spot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Spot::Clear() {
// @@protoc_insertion_point(message_clear_start:TSF.Spot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&molecule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&molecule_)) + sizeof(z_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fluorophore_type_) -
        reinterpret_cast<char*>(&intensity_)) + sizeof(fluorophore_type_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&y_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_precision_) -
        reinterpret_cast<char*>(&y_position_)) + sizeof(z_precision_));
  }
  x_position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 molecule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_molecule(&has_bits);
          molecule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame(&has_bits);
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_slice(&has_bits);
          slice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pos(&has_bits);
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float intensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_intensity(&has_bits);
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float background = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_background(&has_bits);
          background_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float a = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float theta = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.LocationUnits location_units = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSF::LocationUnits_IsValid(val))) {
            _internal_set_location_units(static_cast<::TSF::LocationUnits>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSF.IntensityUnits intensity_units = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSF::IntensityUnits_IsValid(val))) {
            _internal_set_intensity_units(static_cast<::TSF::IntensityUnits>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 fluorophore_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_fluorophore_type(&has_bits);
          fluorophore_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cluster = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_cluster(&has_bits);
          cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x_original = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_x_original(&has_bits);
          x_original_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_original = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_y_original(&has_bits);
          y_original_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z_original = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_z_original(&has_bits);
          z_original_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float x_precision = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_x_precision(&has_bits);
          x_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_precision = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_y_precision(&has_bits);
          y_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z_precision = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_z_precision(&has_bits);
          z_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x_position = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_x_position(&has_bits);
          x_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y_position = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_y_position(&has_bits);
          y_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((12000u <= tag && tag < 16384u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Spot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSF.Spot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 molecule = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_molecule(), target);
  }

  // required int32 channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // required int32 frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_frame(), target);
  }

  // optional int32 slice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_slice(), target);
  }

  // optional int32 pos = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pos(), target);
  }

  // required float x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_x(), target);
  }

  // required float y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_y(), target);
  }

  // optional float z = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_z(), target);
  }

  // required float intensity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_intensity(), target);
  }

  // optional float background = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_background(), target);
  }

  // optional float width = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_width(), target);
  }

  // optional float a = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_a(), target);
  }

  // optional float theta = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_theta(), target);
  }

  // optional .TSF.LocationUnits location_units = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_location_units(), target);
  }

  // optional .TSF.IntensityUnits intensity_units = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_intensity_units(), target);
  }

  // optional int32 fluorophore_type = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_fluorophore_type(), target);
  }

  // optional int32 cluster = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_cluster(), target);
  }

  // optional float x_original = 101;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(101, this->_internal_x_original(), target);
  }

  // optional float y_original = 102;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(102, this->_internal_y_original(), target);
  }

  // optional float z_original = 103;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(103, this->_internal_z_original(), target);
  }

  // optional float x_precision = 104;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(104, this->_internal_x_precision(), target);
  }

  // optional float y_precision = 105;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(105, this->_internal_y_precision(), target);
  }

  // optional float z_precision = 106;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(106, this->_internal_z_precision(), target);
  }

  // optional int32 x_position = 107;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_x_position(), target);
  }

  // optional int32 y_position = 108;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_y_position(), target);
  }

  // Extension range [1500, 2048)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1500, 2048, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSF.Spot)
  return target;
}

size_t Spot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSF.Spot)
  size_t total_size = 0;

  if (_internal_has_molecule()) {
    // required int32 molecule = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_molecule());
  }

  if (_internal_has_channel()) {
    // required int32 channel = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  if (_internal_has_frame()) {
    // required int32 frame = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frame());
  }

  if (_internal_has_x()) {
    // required float x = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_intensity()) {
    // required float intensity = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Spot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSF.Spot)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (((_has_bits_[0] & 0x00000167) ^ 0x00000167) == 0) {  // All required fields are present.
    // required int32 molecule = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_molecule());

    // required int32 channel = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());

    // required int32 frame = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frame());

    // required float x = 7;
    total_size += 1 + 4;

    // required float y = 8;
    total_size += 1 + 4;

    // required float intensity = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional int32 slice = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slice());
    }

    // optional int32 pos = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pos());
    }

  }
  // optional float z = 9;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x0000fe00u) {
    // optional float background = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float width = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float a = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float theta = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional .TSF.LocationUnits location_units = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location_units());
    }

    // optional .TSF.IntensityUnits intensity_units = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_intensity_units());
    }

    // optional int32 fluorophore_type = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fluorophore_type());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 y_position = 108;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y_position());
    }

    // optional int32 cluster = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cluster());
    }

    // optional float x_original = 101;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float y_original = 102;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float z_original = 103;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float x_precision = 104;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float y_precision = 105;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float z_precision = 106;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  // optional int32 x_position = 107;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Spot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Spot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Spot::GetClassData() const { return &_class_data_; }

void Spot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Spot *>(to)->MergeFrom(
      static_cast<const Spot &>(from));
}


void Spot::MergeFrom(const Spot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSF.Spot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      molecule_ = from.molecule_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_ = from.frame_;
    }
    if (cached_has_bits & 0x00000008u) {
      slice_ = from.slice_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      intensity_ = from.intensity_;
    }
    if (cached_has_bits & 0x00000200u) {
      background_ = from.background_;
    }
    if (cached_has_bits & 0x00000400u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00001000u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00002000u) {
      location_units_ = from.location_units_;
    }
    if (cached_has_bits & 0x00004000u) {
      intensity_units_ = from.intensity_units_;
    }
    if (cached_has_bits & 0x00008000u) {
      fluorophore_type_ = from.fluorophore_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      y_position_ = from.y_position_;
    }
    if (cached_has_bits & 0x00020000u) {
      cluster_ = from.cluster_;
    }
    if (cached_has_bits & 0x00040000u) {
      x_original_ = from.x_original_;
    }
    if (cached_has_bits & 0x00080000u) {
      y_original_ = from.y_original_;
    }
    if (cached_has_bits & 0x00100000u) {
      z_original_ = from.z_original_;
    }
    if (cached_has_bits & 0x00200000u) {
      x_precision_ = from.x_precision_;
    }
    if (cached_has_bits & 0x00400000u) {
      y_precision_ = from.y_precision_;
    }
    if (cached_has_bits & 0x00800000u) {
      z_precision_ = from.z_precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_x_position(from._internal_x_position());
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Spot::CopyFrom(const Spot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSF.Spot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spot::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Spot::InternalSwap(Spot* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Spot, x_position_)
      + sizeof(Spot::x_position_)
      - PROTOBUF_FIELD_OFFSET(Spot, molecule_)>(
          reinterpret_cast<char*>(&molecule_),
          reinterpret_cast<char*>(&other->molecule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Spot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSFProto_2eproto_getter, &descriptor_table_TSFProto_2eproto_once,
      file_level_metadata_TSFProto_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSF
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSF::FluorophoreType* Arena::CreateMaybeMessage< ::TSF::FluorophoreType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSF::FluorophoreType >(arena);
}
template<> PROTOBUF_NOINLINE ::TSF::ROI* Arena::CreateMaybeMessage< ::TSF::ROI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSF::ROI >(arena);
}
template<> PROTOBUF_NOINLINE ::TSF::SpotList* Arena::CreateMaybeMessage< ::TSF::SpotList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSF::SpotList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSF::Spot* Arena::CreateMaybeMessage< ::TSF::Spot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSF::Spot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
